// Code generated by protoc-gen-go. DO NOT EDIT.
// source: push.proto

package push

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RegistrationRequest struct {
	ClientName           string   `protobuf:"bytes,1,opt,name=clientName,proto3" json:"clientName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegistrationRequest) Reset()         { *m = RegistrationRequest{} }
func (m *RegistrationRequest) String() string { return proto.CompactTextString(m) }
func (*RegistrationRequest) ProtoMessage()    {}
func (*RegistrationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1e4bfd2e9d102bb, []int{0}
}

func (m *RegistrationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistrationRequest.Unmarshal(m, b)
}
func (m *RegistrationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistrationRequest.Marshal(b, m, deterministic)
}
func (m *RegistrationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrationRequest.Merge(m, src)
}
func (m *RegistrationRequest) XXX_Size() int {
	return xxx_messageInfo_RegistrationRequest.Size(m)
}
func (m *RegistrationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrationRequest proto.InternalMessageInfo

func (m *RegistrationRequest) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

type RegistrationResponse struct {
	Notice               string   `protobuf:"bytes,3,opt,name=notice,proto3" json:"notice,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegistrationResponse) Reset()         { *m = RegistrationResponse{} }
func (m *RegistrationResponse) String() string { return proto.CompactTextString(m) }
func (*RegistrationResponse) ProtoMessage()    {}
func (*RegistrationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1e4bfd2e9d102bb, []int{1}
}

func (m *RegistrationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistrationResponse.Unmarshal(m, b)
}
func (m *RegistrationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistrationResponse.Marshal(b, m, deterministic)
}
func (m *RegistrationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrationResponse.Merge(m, src)
}
func (m *RegistrationResponse) XXX_Size() int {
	return xxx_messageInfo_RegistrationResponse.Size(m)
}
func (m *RegistrationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrationResponse proto.InternalMessageInfo

func (m *RegistrationResponse) GetNotice() string {
	if m != nil {
		return m.Notice
	}
	return ""
}

func init() {
	proto.RegisterType((*RegistrationRequest)(nil), "RegistrationRequest")
	proto.RegisterType((*RegistrationResponse)(nil), "RegistrationResponse")
}

func init() { proto.RegisterFile("push.proto", fileDescriptor_d1e4bfd2e9d102bb) }

var fileDescriptor_d1e4bfd2e9d102bb = []byte{
	// 147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x28, 0x2d, 0xce,
	0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x32, 0xe5, 0x12, 0x0e, 0x4a, 0x4d, 0xcf, 0x2c, 0x2e,
	0x29, 0x4a, 0x2c, 0xc9, 0xcc, 0xcf, 0x0b, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe3,
	0xe2, 0x4a, 0xce, 0xc9, 0x4c, 0xcd, 0x2b, 0xf1, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4,
	0xe0, 0x0c, 0x42, 0x12, 0x51, 0xd2, 0xe3, 0x12, 0x41, 0xd5, 0x56, 0x5c, 0x90, 0x9f, 0x57, 0x9c,
	0x2a, 0x24, 0xc6, 0xc5, 0x96, 0x97, 0x5f, 0x92, 0x99, 0x9c, 0x2a, 0xc1, 0x0c, 0xd6, 0x03, 0xe5,
	0x19, 0xb9, 0x71, 0x71, 0x82, 0x2c, 0xf5, 0xcb, 0x2f, 0xc9, 0x4c, 0x13, 0xb2, 0xe4, 0xe2, 0x80,
	0x68, 0x4e, 0x2d, 0x12, 0x12, 0xd1, 0xc3, 0x62, 0xbd, 0x94, 0xa8, 0x1e, 0x36, 0xd3, 0x0d, 0x18,
	0x93, 0xd8, 0xc0, 0xae, 0x36, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x22, 0x5b, 0xde, 0x8a, 0xc3,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PushNotifClient is the client API for PushNotif service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PushNotifClient interface {
	Register(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (PushNotif_RegisterClient, error)
}

type pushNotifClient struct {
	cc *grpc.ClientConn
}

func NewPushNotifClient(cc *grpc.ClientConn) PushNotifClient {
	return &pushNotifClient{cc}
}

func (c *pushNotifClient) Register(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (PushNotif_RegisterClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PushNotif_serviceDesc.Streams[0], "/pushNotif/Register", opts...)
	if err != nil {
		return nil, err
	}
	x := &pushNotifRegisterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PushNotif_RegisterClient interface {
	Recv() (*RegistrationResponse, error)
	grpc.ClientStream
}

type pushNotifRegisterClient struct {
	grpc.ClientStream
}

func (x *pushNotifRegisterClient) Recv() (*RegistrationResponse, error) {
	m := new(RegistrationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PushNotifServer is the server API for PushNotif service.
type PushNotifServer interface {
	Register(*RegistrationRequest, PushNotif_RegisterServer) error
}

func RegisterPushNotifServer(s *grpc.Server, srv PushNotifServer) {
	s.RegisterService(&_PushNotif_serviceDesc, srv)
}

func _PushNotif_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RegistrationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PushNotifServer).Register(m, &pushNotifRegisterServer{stream})
}

type PushNotif_RegisterServer interface {
	Send(*RegistrationResponse) error
	grpc.ServerStream
}

type pushNotifRegisterServer struct {
	grpc.ServerStream
}

func (x *pushNotifRegisterServer) Send(m *RegistrationResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _PushNotif_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pushNotif",
	HandlerType: (*PushNotifServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _PushNotif_Register_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "push.proto",
}
